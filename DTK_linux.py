# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import cv2.cv as cv
import cv2
import os

os.environ['GLOG_minloglevel'] = '2'
from sys import version_info

if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DTK_linux', [dirname(__file__)])
        except ImportError:
            import _DTK_linux
            return _DTK_linux
        if fp is not None:
            try:
                _mod = imp.load_module('_DTK_linux', fp, pathname, description)
            finally:
                fp.close()
            return _mod


    _DTK_linux = swig_import_helper()
    del swig_import_helper
else:
    import _DTK_linux
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method: return method(self, value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method: return method(self)
    raise AttributeError(name)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass


    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")

    __repr__ = _swig_repr
    __swig_destroy__ = _DTK_linux.delete_SwigPyIterator
    __del__ = lambda self: None;

    def value(self): return _DTK_linux.SwigPyIterator_value(self)

    def incr(self, n=1): return _DTK_linux.SwigPyIterator_incr(self, n)

    def decr(self, n=1): return _DTK_linux.SwigPyIterator_decr(self, n)

    def distance(self, *args): return _DTK_linux.SwigPyIterator_distance(self, *args)

    def equal(self, *args): return _DTK_linux.SwigPyIterator_equal(self, *args)

    def copy(self): return _DTK_linux.SwigPyIterator_copy(self)

    def next(self): return _DTK_linux.SwigPyIterator_next(self)

    def __next__(self): return _DTK_linux.SwigPyIterator___next__(self)

    def previous(self): return _DTK_linux.SwigPyIterator_previous(self)

    def advance(self, *args): return _DTK_linux.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args): return _DTK_linux.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args): return _DTK_linux.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args): return _DTK_linux.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args): return _DTK_linux.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args): return _DTK_linux.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args): return _DTK_linux.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self


SwigPyIterator_swigregister = _DTK_linux.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


class ImgData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImgData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImgData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _DTK_linux.ImgData_type_set
    __swig_getmethods__["type"] = _DTK_linux.ImgData_type_get
    if _newclass: type = _swig_property(_DTK_linux.ImgData_type_get, _DTK_linux.ImgData_type_set)
    __swig_setmethods__["buffer"] = _DTK_linux.ImgData_buffer_set
    __swig_getmethods__["buffer"] = _DTK_linux.ImgData_buffer_get
    if _newclass: buffer = _swig_property(_DTK_linux.ImgData_buffer_get, _DTK_linux.ImgData_buffer_set)

    def __init__(self):
        this = _DTK_linux.new_ImgData()
        try:
            self.this.append(this)
        except:
            self.this = this

    __swig_destroy__ = _DTK_linux.delete_ImgData
    __del__ = lambda self: None;


ImgData_swigregister = _DTK_linux.ImgData_swigregister
ImgData_swigregister(ImgData)


class _CvRect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _CvRect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _CvRect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _DTK_linux._CvRect_x_set
    __swig_getmethods__["x"] = _DTK_linux._CvRect_x_get
    if _newclass: x = _swig_property(_DTK_linux._CvRect_x_get, _DTK_linux._CvRect_x_set)
    __swig_setmethods__["y"] = _DTK_linux._CvRect_y_set
    __swig_getmethods__["y"] = _DTK_linux._CvRect_y_get
    if _newclass: y = _swig_property(_DTK_linux._CvRect_y_get, _DTK_linux._CvRect_y_set)
    __swig_setmethods__["width"] = _DTK_linux._CvRect_width_set
    __swig_getmethods__["width"] = _DTK_linux._CvRect_width_get
    if _newclass: width = _swig_property(_DTK_linux._CvRect_width_get, _DTK_linux._CvRect_width_set)
    __swig_setmethods__["height"] = _DTK_linux._CvRect_height_set
    __swig_getmethods__["height"] = _DTK_linux._CvRect_height_get
    if _newclass: height = _swig_property(_DTK_linux._CvRect_height_get, _DTK_linux._CvRect_height_set)
    if _newclass: height = _swig_property(_DTK_linux._CvRect_height_get, _DTK_linux._CvRect_height_set)

    def __init__(self, x, y, width, height):
        this = _DTK_linux.new__CvRect()
        try:
            self.this.append(this)
        except:
            self.this = this
        self.x = x;
        self.y = y;
        self.width = width;
        self.height = height;

    __swig_destroy__ = _DTK_linux.delete__CvRect
    __del__ = lambda self: None;


_CvRect_swigregister = _DTK_linux._CvRect_swigregister
_CvRect_swigregister(_CvRect)


class qzones(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, qzones, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, qzones, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _DTK_linux.qzones_type_set
    __swig_getmethods__["type"] = _DTK_linux.qzones_type_get
    if _newclass: type = _swig_property(_DTK_linux.qzones_type_get, _DTK_linux.qzones_type_set)
    __swig_setmethods__["qzone"] = _DTK_linux.qzones_qzone_set
    __swig_getmethods__["qzone"] = _DTK_linux.qzones_qzone_get
    if _newclass: qzone = _swig_property(_DTK_linux.qzones_qzone_get, _DTK_linux.qzones_qzone_set)
    __swig_setmethods__["scorezones"] = _DTK_linux.qzones_scorezones_set
    __swig_getmethods__["scorezones"] = _DTK_linux.qzones_scorezones_get
    if _newclass: scorezones = _swig_property(_DTK_linux.qzones_scorezones_get, _DTK_linux.qzones_scorezones_set)

    def __init__(self):
        this = _DTK_linux.new_qzones()
        try:
            self.this.append(this)
        except:
            self.this = this

    __swig_destroy__ = _DTK_linux.delete_qzones
    __del__ = lambda self: None;


qzones_swigregister = _DTK_linux.qzones_swigregister
qzones_swigregister(qzones)


class pageone(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pageone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pageone, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cid"] = _DTK_linux.pageone_cid_set
    __swig_getmethods__["cid"] = _DTK_linux.pageone_cid_get
    if _newclass: cid = _swig_property(_DTK_linux.pageone_cid_get, _DTK_linux.pageone_cid_set)
    __swig_setmethods__["num"] = _DTK_linux.pageone_num_set
    __swig_getmethods__["num"] = _DTK_linux.pageone_num_get
    if _newclass: num = _swig_property(_DTK_linux.pageone_num_get, _DTK_linux.pageone_num_set)
    __swig_setmethods__["no"] = _DTK_linux.pageone_no_set
    __swig_getmethods__["no"] = _DTK_linux.pageone_no_get
    if _newclass: no = _swig_property(_DTK_linux.pageone_no_get, _DTK_linux.pageone_no_set)
    __swig_setmethods__["qz"] = _DTK_linux.pageone_qz_set
    __swig_getmethods__["qz"] = _DTK_linux.pageone_qz_get
    if _newclass: qz = _swig_property(_DTK_linux.pageone_qz_get, _DTK_linux.pageone_qz_set)

    def __init__(self):
        this = _DTK_linux.new_pageone()
        try:
            self.this.append(this)
        except:
            self.this = this

    __swig_destroy__ = _DTK_linux.delete_pageone
    __del__ = lambda self: None;


pageone_swigregister = _DTK_linux.pageone_swigregister
pageone_swigregister(pageone)


class pic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pic, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buffer"] = _DTK_linux.pic_buffer_set
    __swig_getmethods__["buffer"] = _DTK_linux.pic_buffer_get
    if _newclass: buffer = _swig_property(_DTK_linux.pic_buffer_get, _DTK_linux.pic_buffer_set)
    __swig_setmethods__["width"] = _DTK_linux.pic_width_set
    __swig_getmethods__["width"] = _DTK_linux.pic_width_get
    if _newclass: width = _swig_property(_DTK_linux.pic_width_get, _DTK_linux.pic_width_set)
    __swig_setmethods__["height"] = _DTK_linux.pic_height_set
    __swig_getmethods__["height"] = _DTK_linux.pic_height_get
    if _newclass: height = _swig_property(_DTK_linux.pic_height_get, _DTK_linux.pic_height_set)

    def __init__(self):
        this = _DTK_linux.new_pic()
        try:
            self.this.append(this)
        except:
            self.this = this

    __swig_destroy__ = _DTK_linux.delete_pic
    __del__ = lambda self: None;


pic_swigregister = _DTK_linux.pic_swigregister
pic_swigregister(pic)


class qzonesResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, qzonesResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, qzonesResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["no"] = _DTK_linux.qzonesResult_no_set
    __swig_getmethods__["no"] = _DTK_linux.qzonesResult_no_get
    if _newclass: no = _swig_property(_DTK_linux.qzonesResult_no_get, _DTK_linux.qzonesResult_no_set)
    __swig_setmethods__["type"] = _DTK_linux.qzonesResult_type_set
    __swig_getmethods__["type"] = _DTK_linux.qzonesResult_type_get
    if _newclass: type = _swig_property(_DTK_linux.qzonesResult_type_get, _DTK_linux.qzonesResult_type_set)
    __swig_setmethods__["answer"] = _DTK_linux.qzonesResult_answer_set
    __swig_getmethods__["answer"] = _DTK_linux.qzonesResult_answer_get
    if _newclass: answer = _swig_property(_DTK_linux.qzonesResult_answer_get, _DTK_linux.qzonesResult_answer_set)
    __swig_setmethods__["score"] = _DTK_linux.qzonesResult_score_set
    __swig_getmethods__["score"] = _DTK_linux.qzonesResult_score_get
    if _newclass: score = _swig_property(_DTK_linux.qzonesResult_score_get, _DTK_linux.qzonesResult_score_set)
    __swig_setmethods__["qzone"] = _DTK_linux.qzonesResult_qzone_set
    __swig_getmethods__["qzone"] = _DTK_linux.qzonesResult_qzone_get
    if _newclass: qzone = _swig_property(_DTK_linux.qzonesResult_qzone_get, _DTK_linux.qzonesResult_qzone_set)

    def __init__(self):
        this = _DTK_linux.new_qzonesResult()
        try:
            self.this.append(this)
        except:
            self.this = this

    __swig_destroy__ = _DTK_linux.delete_qzonesResult
    __del__ = lambda self: None;


qzonesResult_swigregister = _DTK_linux.qzonesResult_swigregister
qzonesResult_swigregister(qzonesResult)


class pageoneResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pageoneResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pageoneResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cid"] = _DTK_linux.pageoneResult_cid_set
    __swig_getmethods__["cid"] = _DTK_linux.pageoneResult_cid_get
    if _newclass: cid = _swig_property(_DTK_linux.pageoneResult_cid_get, _DTK_linux.pageoneResult_cid_set)
    __swig_setmethods__["num"] = _DTK_linux.pageoneResult_num_set
    __swig_getmethods__["num"] = _DTK_linux.pageoneResult_num_get
    if _newclass: num = _swig_property(_DTK_linux.pageoneResult_num_get, _DTK_linux.pageoneResult_num_set)
    __swig_setmethods__["no"] = _DTK_linux.pageoneResult_no_set
    __swig_getmethods__["no"] = _DTK_linux.pageoneResult_no_get
    if _newclass: no = _swig_property(_DTK_linux.pageoneResult_no_get, _DTK_linux.pageoneResult_no_set)
    __swig_setmethods__["student"] = _DTK_linux.pageoneResult_student_set
    __swig_getmethods__["student"] = _DTK_linux.pageoneResult_student_get
    if _newclass: student = _swig_property(_DTK_linux.pageoneResult_student_get, _DTK_linux.pageoneResult_student_set)
    __swig_setmethods__["status"] = _DTK_linux.pageoneResult_status_set
    __swig_getmethods__["status"] = _DTK_linux.pageoneResult_status_get
    if _newclass: status = _swig_property(_DTK_linux.pageoneResult_status_get, _DTK_linux.pageoneResult_status_set)
    __swig_setmethods__["qzR"] = _DTK_linux.pageoneResult_qzR_set
    __swig_getmethods__["qzR"] = _DTK_linux.pageoneResult_qzR_get
    if _newclass: qzR = _swig_property(_DTK_linux.pageoneResult_qzR_get, _DTK_linux.pageoneResult_qzR_set)

    def __init__(self):
        this = _DTK_linux.new_pageoneResult()
        try:
            self.this.append(this)
        except:
            self.this = this

    __swig_destroy__ = _DTK_linux.delete_pageoneResult
    __del__ = lambda self: None;


pageoneResult_swigregister = _DTK_linux.pageoneResult_swigregister
pageoneResult_swigregister(pageoneResult)


def segImgData(*args):
    return _DTK_linux.segImgData(*args)


segImgData = _DTK_linux.segImgData


def rec_QrCode(*args):
    return _DTK_linux.rec_QrCode(*args)


rec_QrCode = _DTK_linux.rec_QrCode


def getSegRecResult1(*args):
    return _DTK_linux.getSegRecResult1(*args)


getSegRecResult1 = _DTK_linux.getSegRecResult1


def getSegRecResult2(*args):
    return _DTK_linux.getSegRecResult2(*args)


getSegRecResult2 = _DTK_linux.getSegRecResult2


def init_CNN_model(*args):
    return _DTK_linux.init_CNN_model(*args)


init_CNN_model = _DTK_linux.init_CNN_model


class RectVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RectVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _DTK_linux.RectVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DTK_linux.RectVector___nonzero__(self)

    def __bool__(self):
        return _DTK_linux.RectVector___bool__(self)

    def __len__(self):
        return _DTK_linux.RectVector___len__(self)

    def pop(self):
        return _DTK_linux.RectVector_pop(self)

    def __getslice__(self, *args):
        return _DTK_linux.RectVector___getslice__(self, *args)

    def __setslice__(self, *args):
        return _DTK_linux.RectVector___setslice__(self, *args)

    def __delslice__(self, *args):
        return _DTK_linux.RectVector___delslice__(self, *args)

    def __delitem__(self, *args):
        return _DTK_linux.RectVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DTK_linux.RectVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DTK_linux.RectVector___setitem__(self, *args)

    def append(self, *args):
        return _DTK_linux.RectVector_append(self, *args)

    def empty(self):
        return _DTK_linux.RectVector_empty(self)

    def size(self):
        return _DTK_linux.RectVector_size(self)

    def clear(self):
        return _DTK_linux.RectVector_clear(self)

    def swap(self, *args):
        return _DTK_linux.RectVector_swap(self, *args)

    def get_allocator(self):
        return _DTK_linux.RectVector_get_allocator(self)

    def begin(self):
        return _DTK_linux.RectVector_begin(self)

    def end(self):
        return _DTK_linux.RectVector_end(self)

    def rbegin(self):
        return _DTK_linux.RectVector_rbegin(self)

    def rend(self):
        return _DTK_linux.RectVector_rend(self)

    def pop_back(self):
        return _DTK_linux.RectVector_pop_back(self)

    def erase(self, *args):
        return _DTK_linux.RectVector_erase(self, *args)

    def __init__(self, *args):
        this = _DTK_linux.new_RectVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, *args):
        return _DTK_linux.RectVector_push_back(self, *args)

    def front(self):
        return _DTK_linux.RectVector_front(self)

    def back(self):
        return _DTK_linux.RectVector_back(self)

    def assign(self, *args):
        return _DTK_linux.RectVector_assign(self, *args)

    def resize(self, *args):
        return _DTK_linux.RectVector_resize(self, *args)

    def insert(self, *args):
        return _DTK_linux.RectVector_insert(self, *args)

    def reserve(self, *args):
        return _DTK_linux.RectVector_reserve(self, *args)

    def capacity(self):
        return _DTK_linux.RectVector_capacity(self)

    __swig_destroy__ = _DTK_linux.delete_RectVector
    __del__ = lambda self: None;


RectVector_swigregister = _DTK_linux.RectVector_swigregister
RectVector_swigregister(RectVector)


class QzonesVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QzonesVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QzonesVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _DTK_linux.QzonesVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DTK_linux.QzonesVector___nonzero__(self)

    def __bool__(self):
        return _DTK_linux.QzonesVector___bool__(self)

    def __len__(self):
        return _DTK_linux.QzonesVector___len__(self)

    def pop(self):
        return _DTK_linux.QzonesVector_pop(self)

    def __getslice__(self, *args):
        return _DTK_linux.QzonesVector___getslice__(self, *args)

    def __setslice__(self, *args):
        return _DTK_linux.QzonesVector___setslice__(self, *args)

    def __delslice__(self, *args):
        return _DTK_linux.QzonesVector___delslice__(self, *args)

    def __delitem__(self, *args):
        return _DTK_linux.QzonesVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DTK_linux.QzonesVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DTK_linux.QzonesVector___setitem__(self, *args)

    def append(self, *args):
        return _DTK_linux.QzonesVector_append(self, *args)

    def empty(self):
        return _DTK_linux.QzonesVector_empty(self)

    def size(self):
        return _DTK_linux.QzonesVector_size(self)

    def clear(self):
        return _DTK_linux.QzonesVector_clear(self)

    def swap(self, *args):
        return _DTK_linux.QzonesVector_swap(self, *args)

    def get_allocator(self):
        return _DTK_linux.QzonesVector_get_allocator(self)

    def begin(self):
        return _DTK_linux.QzonesVector_begin(self)

    def end(self):
        return _DTK_linux.QzonesVector_end(self)

    def rbegin(self):
        return _DTK_linux.QzonesVector_rbegin(self)

    def rend(self):
        return _DTK_linux.QzonesVector_rend(self)

    def pop_back(self):
        return _DTK_linux.QzonesVector_pop_back(self)

    def erase(self, *args):
        return _DTK_linux.QzonesVector_erase(self, *args)

    def __init__(self, *args):
        this = _DTK_linux.new_QzonesVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, *args):
        return _DTK_linux.QzonesVector_push_back(self, *args)

    def front(self):
        return _DTK_linux.QzonesVector_front(self)

    def back(self):
        return _DTK_linux.QzonesVector_back(self)

    def assign(self, *args):
        return _DTK_linux.QzonesVector_assign(self, *args)

    def resize(self, *args):
        return _DTK_linux.QzonesVector_resize(self, *args)

    def insert(self, *args):
        return _DTK_linux.QzonesVector_insert(self, *args)

    def reserve(self, *args):
        return _DTK_linux.QzonesVector_reserve(self, *args)

    def capacity(self):
        return _DTK_linux.QzonesVector_capacity(self)

    __swig_destroy__ = _DTK_linux.delete_QzonesVector
    __del__ = lambda self: None;


QzonesVector_swigregister = _DTK_linux.QzonesVector_swigregister
QzonesVector_swigregister(QzonesVector)


class PageoneVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageoneVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PageoneVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _DTK_linux.PageoneVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DTK_linux.PageoneVector___nonzero__(self)

    def __bool__(self):
        return _DTK_linux.PageoneVector___bool__(self)

    def __len__(self):
        return _DTK_linux.PageoneVector___len__(self)

    def pop(self):
        return _DTK_linux.PageoneVector_pop(self)

    def __getslice__(self, *args):
        return _DTK_linux.PageoneVector___getslice__(self, *args)

    def __setslice__(self, *args):
        return _DTK_linux.PageoneVector___setslice__(self, *args)

    def __delslice__(self, *args):
        return _DTK_linux.PageoneVector___delslice__(self, *args)

    def __delitem__(self, *args):
        return _DTK_linux.PageoneVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DTK_linux.PageoneVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DTK_linux.PageoneVector___setitem__(self, *args)

    def append(self, *args):
        return _DTK_linux.PageoneVector_append(self, *args)

    def empty(self):
        return _DTK_linux.PageoneVector_empty(self)

    def size(self):
        return _DTK_linux.PageoneVector_size(self)

    def clear(self):
        return _DTK_linux.PageoneVector_clear(self)

    def swap(self, *args):
        return _DTK_linux.PageoneVector_swap(self, *args)

    def get_allocator(self):
        return _DTK_linux.PageoneVector_get_allocator(self)

    def begin(self):
        return _DTK_linux.PageoneVector_begin(self)

    def end(self):
        return _DTK_linux.PageoneVector_end(self)

    def rbegin(self):
        return _DTK_linux.PageoneVector_rbegin(self)

    def rend(self):
        return _DTK_linux.PageoneVector_rend(self)

    def pop_back(self):
        return _DTK_linux.PageoneVector_pop_back(self)

    def erase(self, *args):
        return _DTK_linux.PageoneVector_erase(self, *args)

    def __init__(self, *args):
        this = _DTK_linux.new_PageoneVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, *args):
        return _DTK_linux.PageoneVector_push_back(self, *args)

    def front(self):
        return _DTK_linux.PageoneVector_front(self)

    def back(self):
        return _DTK_linux.PageoneVector_back(self)

    def assign(self, *args):
        return _DTK_linux.PageoneVector_assign(self, *args)

    def resize(self, *args):
        return _DTK_linux.PageoneVector_resize(self, *args)

    def insert(self, *args):
        return _DTK_linux.PageoneVector_insert(self, *args)

    def reserve(self, *args):
        return _DTK_linux.PageoneVector_reserve(self, *args)

    def capacity(self):
        return _DTK_linux.PageoneVector_capacity(self)

    __swig_destroy__ = _DTK_linux.delete_PageoneVector
    __del__ = lambda self: None;


PageoneVector_swigregister = _DTK_linux.PageoneVector_swigregister
PageoneVector_swigregister(PageoneVector)


class QzonesResultvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QzonesResultvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QzonesResultvector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _DTK_linux.QzonesResultvector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DTK_linux.QzonesResultvector___nonzero__(self)

    def __bool__(self):
        return _DTK_linux.QzonesResultvector___bool__(self)

    def __len__(self):
        return _DTK_linux.QzonesResultvector___len__(self)

    def pop(self):
        return _DTK_linux.QzonesResultvector_pop(self)

    def __getslice__(self, *args):
        return _DTK_linux.QzonesResultvector___getslice__(self, *args)

    def __setslice__(self, *args):
        return _DTK_linux.QzonesResultvector___setslice__(self, *args)

    def __delslice__(self, *args):
        return _DTK_linux.QzonesResultvector___delslice__(self, *args)

    def __delitem__(self, *args):
        return _DTK_linux.QzonesResultvector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DTK_linux.QzonesResultvector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DTK_linux.QzonesResultvector___setitem__(self, *args)

    def append(self, *args):
        return _DTK_linux.QzonesResultvector_append(self, *args)

    def empty(self):
        return _DTK_linux.QzonesResultvector_empty(self)

    def size(self):
        return _DTK_linux.QzonesResultvector_size(self)

    def clear(self):
        return _DTK_linux.QzonesResultvector_clear(self)

    def swap(self, *args):
        return _DTK_linux.QzonesResultvector_swap(self, *args)

    def get_allocator(self):
        return _DTK_linux.QzonesResultvector_get_allocator(self)

    def begin(self):
        return _DTK_linux.QzonesResultvector_begin(self)

    def end(self):
        return _DTK_linux.QzonesResultvector_end(self)

    def rbegin(self):
        return _DTK_linux.QzonesResultvector_rbegin(self)

    def rend(self):
        return _DTK_linux.QzonesResultvector_rend(self)

    def pop_back(self):
        return _DTK_linux.QzonesResultvector_pop_back(self)

    def erase(self, *args):
        return _DTK_linux.QzonesResultvector_erase(self, *args)

    def __init__(self, *args):
        this = _DTK_linux.new_QzonesResultvector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, *args):
        return _DTK_linux.QzonesResultvector_push_back(self, *args)

    def front(self):
        return _DTK_linux.QzonesResultvector_front(self)

    def back(self):
        return _DTK_linux.QzonesResultvector_back(self)

    def assign(self, *args):
        return _DTK_linux.QzonesResultvector_assign(self, *args)

    def resize(self, *args):
        return _DTK_linux.QzonesResultvector_resize(self, *args)

    def insert(self, *args):
        return _DTK_linux.QzonesResultvector_insert(self, *args)

    def reserve(self, *args):
        return _DTK_linux.QzonesResultvector_reserve(self, *args)

    def capacity(self):
        return _DTK_linux.QzonesResultvector_capacity(self)

    __swig_destroy__ = _DTK_linux.delete_QzonesResultvector
    __del__ = lambda self: None;


QzonesResultvector_swigregister = _DTK_linux.QzonesResultvector_swigregister
QzonesResultvector_swigregister(QzonesResultvector)


class PageoneResultVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PageoneResultVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PageoneResultVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _DTK_linux.PageoneResultVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _DTK_linux.PageoneResultVector___nonzero__(self)

    def __bool__(self):
        return _DTK_linux.PageoneResultVector___bool__(self)

    def __len__(self):
        return _DTK_linux.PageoneResultVector___len__(self)

    def pop(self):
        return _DTK_linux.PageoneResultVector_pop(self)

    def __getslice__(self, *args):
        return _DTK_linux.PageoneResultVector___getslice__(self, *args)

    def __setslice__(self, *args):
        return _DTK_linux.PageoneResultVector___setslice__(self, *args)

    def __delslice__(self, *args):
        return _DTK_linux.PageoneResultVector___delslice__(self, *args)

    def __delitem__(self, *args):
        return _DTK_linux.PageoneResultVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _DTK_linux.PageoneResultVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _DTK_linux.PageoneResultVector___setitem__(self, *args)

    def append(self, *args):
        return _DTK_linux.PageoneResultVector_append(self, *args)

    def empty(self):
        return _DTK_linux.PageoneResultVector_empty(self)

    def size(self):
        return _DTK_linux.PageoneResultVector_size(self)

    def clear(self):
        return _DTK_linux.PageoneResultVector_clear(self)

    def swap(self, *args):
        return _DTK_linux.PageoneResultVector_swap(self, *args)

    def get_allocator(self):
        return _DTK_linux.PageoneResultVector_get_allocator(self)

    def begin(self):
        return _DTK_linux.PageoneResultVector_begin(self)

    def end(self):
        return _DTK_linux.PageoneResultVector_end(self)

    def rbegin(self):
        return _DTK_linux.PageoneResultVector_rbegin(self)

    def rend(self):
        return _DTK_linux.PageoneResultVector_rend(self)

    def pop_back(self):
        return _DTK_linux.PageoneResultVector_pop_back(self)

    def erase(self, *args):
        return _DTK_linux.PageoneResultVector_erase(self, *args)

    def __init__(self, *args):
        this = _DTK_linux.new_PageoneResultVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, *args):
        return _DTK_linux.PageoneResultVector_push_back(self, *args)

    def front(self):
        return _DTK_linux.PageoneResultVector_front(self)

    def back(self):
        return _DTK_linux.PageoneResultVector_back(self)

    def assign(self, *args):
        return _DTK_linux.PageoneResultVector_assign(self, *args)

    def resize(self, *args):
        return _DTK_linux.PageoneResultVector_resize(self, *args)

    def insert(self, *args):
        return _DTK_linux.PageoneResultVector_insert(self, *args)

    def reserve(self, *args):
        return _DTK_linux.PageoneResultVector_reserve(self, *args)

    def capacity(self):
        return _DTK_linux.PageoneResultVector_capacity(self)

    __swig_destroy__ = _DTK_linux.delete_PageoneResultVector
    __del__ = lambda self: None;


PageoneResultVector_swigregister = _DTK_linux.PageoneResultVector_swigregister
PageoneResultVector_swigregister(PageoneResultVector)

# This file is compatible with both classic and new-style classes.
# This file is compatible with both classic and new-style classes.

'''
img1 = cv2.cv.LoadImage('test2_0.jpg',0)
img2 = cv2.cv.LoadImage('test2_1.jpg',0)
height1 = img1.height
width1 = img1.width

height2 = img2.height
width2 = img2.width
raw_data1 = img1.tostring()
raw_data2 = img2.tostring()
i = init_CNN_model("DTK.prototxt","DTK.caffemodel","DTK.binaryproto")
str1 = '{"qz":[{"y":2501,"x":1069,"height":326,"width":964,"scorezones":[{"y":2784,"x":1167,"height":33,"width":58},{"y":2715,"x":1167,"height":34,"width":58},{"y":2646,"x":1167,"height":34,"width":58},{"y":2578,"x":1167,"height":33,"width":58}]},{"y":2449,"x":19,"height":452,"width":985,"scorezones":[{"y":2819,"x":902,"height":67,"width":67},{"y":2819,"x":819,"height":67,"width":67}]},{"y":2221,"x":19,"height":198,"width":985,"scorezones":[{"y":2374,"x":338,"height":34,"width":58},{"y":2374,"x":96,"height":34,"width":57},{"y":2306,"x":360,"height":33,"width":57},{"y":2306,"x":96,"height":33,"width":57}]},{"y":1924,"x":19,"height":267,"width":985,"scorezones":[{"y":2149,"x":339,"height":33,"width":58},{"y":2149,"x":97,"height":33,"width":57},{"y":2080,"x":318,"height":34,"width":57},{"y":2080,"x":97,"height":34,"width":57}]},{"y":1716,"x":19,"height":187,"width":985,"scorezones":[{"y":1858,"x":835,"height":33,"width":57},{"y":1858,"x":624,"height":33,"width":58},{"y":1858,"x":414,"height":33,"width":57},{"y":1858,"x":96,"height":33,"width":57}]},{"y":1711,"x":1069,"height":570,"width":964,"scorezones":[{"y":1724,"x":1952,"height":67,"width":69},{"y":1724,"x":1870,"height":67,"width":68}]},{"y":1398,"x":1069,"height":290,"width":964,"scorezones":[{"y":1611,"x":1952,"height":66,"width":69},{"y":1611,"x":1870,"height":66,"width":68}]},{"y":1394,"x":19,"height":157,"width":985,"scorezones":[{"y":1475,"x":902,"height":66,"width":67},{"y":1475,"x":819,"height":66,"width":67}]},{"y":1033,"x":19,"height":334,"width":985,"scorezones":[{"y":1323,"x":96,"height":34,"width":57},{"y":1254,"x":96,"height":34,"width":57},{"y":1185,"x":96,"height":33,"width":57},{"y":1116,"x":96,"height":34,"width":57}]},{"y":978,"x":1069,"height":395,"width":964,"scorezones":[{"y":1327,"x":1147,"height":34,"width":56},{"y":1193,"x":1147,"height":34,"width":56},{"y":1124,"x":1147,"height":34,"width":56},{"y":1055,"x":1147,"height":33,"width":56}]},{"y":807,"x":19,"height":195,"width":985,"scorezones":[{"y":959,"x":371,"height":34,"width":57},{"y":959,"x":96,"height":34,"width":57},{"y":891,"x":371,"height":33,"width":57},{"y":891,"x":96,"height":33,"width":57}]},{"y":614,"x":1069,"height":334,"width":964,"scorezones":[{"y":899,"x":1147,"height":34,"width":56},{"y":830,"x":1147,"height":34,"width":56},{"y":762,"x":1147,"height":33,"width":56},{"y":692,"x":1147,"height":34,"width":56}]}],"num":8,"no":1,"cid":"58379f74421aa9c513c68d71"}'
str2 = '{"qz":[{"y":2198,"x":22,"height":694,"width":987,"scorezones":[{"y":2454,"x":904,"height":68,"width":67},{"y":2454,"x":822,"height":68,"width":67}]},{"y":1825,"x":22,"height":355,"width":987,"scorezones":[{"y":1899,"x":904,"height":68,"width":67},{"y":1899,"x":822,"height":68,"width":67}]},{"y":1557,"x":22,"height":239,"width":987,"scorezones":[{"y":1721,"x":904,"height":67,"width":67},{"y":1721,"x":822,"height":67,"width":67}]},{"y":1317,"x":22,"height":223,"width":987,"scorezones":[{"y":1464,"x":904,"height":66,"width":67},{"y":1464,"x":822,"height":66,"width":67}]},{"y":1139,"x":22,"height":156,"width":987,"scorezones":[{"y":1219,"x":904,"height":66,"width":67},{"y":1219,"x":822,"height":66,"width":67}]},{"y":1078,"x":1043,"height":1815,"width":991,"scorezones":[{"y":1414,"x":1953,"height":67,"width":67},{"y":1414,"x":1870,"height":67,"width":67}]},{"y":777,"x":22,"height":337,"width":987,"scorezones":[{"y":1068,"x":121,"height":33,"width":57},{"y":999,"x":121,"height":34,"width":57},{"y":930,"x":121,"height":34,"width":57},{"y":862,"x":121,"height":33,"width":57}]},{"y":552,"x":22,"height":197,"width":987,"scorezones":[{"y":705,"x":417,"height":34,"width":57},{"y":705,"x":121,"height":34,"width":57},{"y":637,"x":417,"height":34,"width":57},{"y":637,"x":121,"height":34,"width":57}]},{"y":99,"x":1043,"height":804,"width":991,"scorezones":[{"y":313,"x":1953,"height":68,"width":67},{"y":313,"x":1870,"height":68,"width":67}]},{"y":99,"x":22,"height":427,"width":987,"scorezones":[{"y":481,"x":332,"height":34,"width":56},{"y":481,"x":121,"height":34,"width":57},{"y":412,"x":332,"height":33,"width":56},{"y":412,"x":121,"height":33,"width":57}]}],"num":8,"no":2,"cid":"58379f74421aa9c513c68d71"}'

result = getSegRecResult2(str1,str2,raw_data1, width1,height1,raw_data2, width2, height2)
print 'result: ', dir(result[0])
print 'qzR: ', dir(result[0].qzR[0])
print 'qzone: ', dir(result[0].qzR[0].qzone)
print '---------------page---------------'
for i in range(0, result.size()):
    print 'student: ', result[i].student
    print 'cid: ', result[i].cid
    print 'num: ', result[i].num
    print 'no: ', result[i].no
    print '-----------------qzR-----------------'
    for j in range(0, result[i].qzR.size()):
        print 'score: ', result[i].qzR[j].score
        print 'answer: ', result[i].qzR[j].answer
        print 'type: ', result[i].qzR[j].type
        print 'no: ', result[i].qzR[j].no
        width = result[i].qzR[j].qzone.width
	print 'width: ', width
	height = result[i].qzR[j].qzone.height
        print 'height: ', height
        buffer = result[i].qzR[j].qzone.buffer
	#for iii in range(width * height):
	#	print ord(buffer[iii])
	print 'buffer: ', len(buffer), width*height
        try:
	    im = cv.CreateImage((width,height),8,1)	    
            for ii in range(im.height):
    	    	for jj in range(im.width):
            		im[ii,jj] =   ord(buffer[jj + ii * width]  )
	    cv.SaveImage("{}{}.jpg".format(i, j), im)      
            print 'img ok'
	except:
	    print i, j
	    print 'img wrong'
        print '------------------next--------------------'
'''
